Want to use Scala on Android with Intellij without having to bring the entire sbt build system into your life and the pros/cons it provides?

Before you had to use something like this with sbt and build externally:

https://github.com/jberkel/android-plugin (props to the maintainers/creators, but there's an easier way!)

Just do the following instead:


Text based directions are below, but until I have time to do it myself with markdown, more detailed directions and images can be found here thanks to a helpful user: http://stackoverflow.com/a/17515300/1643939

-- Testing Scala features on Android (and also building without any additional plugins) --

-- Caveats --
Any Android library that requires custom annotation processing may not work (such as http://androidannotations.org/). 

Just mentioning it now if you find yourself spending way too much time with errors that make no sense. More information about it can be found here: http://stackoverflow.com/questions/7454018/using-androidannotations-with-scala-and-gradle

-- Examples --
Source to a Scala Android App I built using a few popular libraries (ActionBarSherlock, support.GridLayout, loaderex) can be found here: 

https://github.com/yareally/SignalInfo/tree/scala


-- FAQ --

Q: What works? 

A:Everything as far as I can tell (even debugging)
--
Q: What doesn't work?

A: Nothing as far as I know so far.
--
Q: Why use this over the sbt plugin?

A: A few reasons:

- No additional tools or code needed (other than ProGuard) so less potential for bugs or issues with Intellij/Android updates.

- Simpify your build process by doing what you normally do when building apps in Intellij.

- You're used to using Java and would like to keep building apps mostly how you did beforehand.

- Don't need a formal build system like sbt or just want to start writing code instead of also learning a useful, but somewhat complex build system.

--
Q: What version of Scala did you test with?

A: 2.10.2, the latest stable as of 2013-06-15
--
Q: How is debugging possible?

A: Proguard is set not to obfusticate so it doesn't remove the debugging symbols. That's really the key to my guide. Proguard can be tricky, but I've taken care of most of the common edge cases you might encounter with the included proguard file in this repository. If you encounter any I missed, just let me know. Things like actionbar sherlock and other libraries should work fine though.
--
Q: Why does Proguard work?

A: There's way too many methods in Scala for the dalvik compiler (dx) to handle if you simply add all the jars to the class path and compile. Proguard will strip out all the excess (otherwise, you'll get errors like Android Dex: [android-scala] trouble writing output: Too many methods: 66095; max is 65536.).
--
Q: Does Google's Android Studio work, since it's based on Intellij?

A: I don't know as I don't use it normally. Google removed many of the Intellij plugins from the default repository in Android Studio. You may be able to import the Scala plugin though. Since Android Studio is unstable (and nearly identical to Intellij 13 preview), Intellij is the preferred solution, imho.
---

To build in Intellij:

Prerequisites:

1) Get Scala (http://www.scala-lang.org/). If you don't have the Scala plugin for Intellij, you need that too of course.

2) Add a Scala facet to the project, setting up the compiler. You may have to create a separate throwaway Scala module first if no Scala plugin has already been added globally. More directions located here: http://confluence.jetbrains.com/display/SCA/Setting+up+Scala+plugin+project+in+IntelliJ+IDEA (note that scala compiler is now its own section and not under compiler as of IDEA 12.1)

3) Set up the Scala facet for the Android project (add continuations if you wish). Alternatively, setting up a Scala project and then adding an Android Facet might be easier for some.

4) Add the following jars as libraries to your project (or globally):
    continuations.jar (if you want to use them [or anything that depends on continuations like Akka or Scala Async])
    scala-actors.jar
    scala-library.jar
    
 -Scala core libraries are under /path-to-scala-install-dir/libs/ and continuations is under /path-to-scala-install-dir/misc/scala-devel/plugins/

5) Make sure the library/libraries created above are set as a dependency for all modules you create a Scala facet (step 2).

 -If you create any additional modules not using Scala (like Java only ones), but wish to use code you wrote from a module with a Scala facet, you just have to add that Scala module as a dependency to the Java only module as you would normally in Intellij.


Compiling your Project:

1) Use the given proguard file in this project (should work for any basic project without modification, if you encounter an issue when adding a library, let me know and I can add a case for it).

2) Add all jar references to your proguard file pointing to your scala and other libraries. Probably not needed though if you did step #4 correctly under prerequisites.

5) Enable proguard for the building of the project via the following :
Go to: file → project settings → modules → select module(s) → compiler tab → enable proguard

6) Build project like how you would normal Java Android project. Proguard is a little slow, but it's required unless you preload the libraries onto the device (which requires root).

7) Run the application

A small example of using async/await I did with Android is located here: https://gist.github.com/yareally/5941489
Note that it also requires continuations and the play framework's json library (which can now be used standalone). 

If you have questions, just create an issue and I'll reply when I can.
